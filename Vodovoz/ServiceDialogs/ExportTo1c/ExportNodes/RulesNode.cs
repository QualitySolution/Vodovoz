using System;
using System.Xml.Linq;

namespace Vodovoz.ExportTo1c
{
	public class RulesNode : IXmlConvertable
	{
		#region IXmlConvertable implementation

		public System.Xml.Linq.XElement ToXml()
		{
			return XElement.Parse(DefaultExchangeStrings.DefaultExchangeRules);
		}

		#endregion
	}
	public static class DefaultExchangeStrings{
		#region rules 
		public static readonly string DefaultExchangeRules = @"<ПравилаОбмена ВерсияФормата=""2.01"" Ид=""70e9dbac-59df-44bb-82c6-7d4f30d37c74    "" Наименование=""Торговля+Склад, редакция 9.2 --&gt; БухгалтерияПредприятия"" ДатаВремяСоздания=""2012-07-26T17:47:01"" Источник=""Торговля+Склад, редакция 9.2"" Приемник=""БухгалтерияПредприятия"">
    <ПослеЗагрузкиОбъекта>Если ИмяТипаОбъекта = ""Справочник"" ИЛИ ИмяТипаОбъекта = ""ПланВидовХарактеристик"" Тогда

	Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
		
		Объект.УстановитьНовыйКод();
		
	КонецЕсли;
	
	РеквизитОрганизация = Объект.Метаданные().Реквизиты.Найти(""Организация"");
	Если РеквизитОрганизация&lt;&gt; Неопределено
		И (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		
		Если (НЕ Объект.ЭтоГруппа) ИЛИ (РеквизитОрганизация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнаяОрганизация"");

		КонецЕсли;
	КонецЕсли;
	
ИначеЕсли ИмяТипаОбъекта = ""Документ"" Тогда

	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда

		ОбщегоНазначения.УстановитьНомерДокумента(Объект);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента(""Организация"", Объект.Метаданные()) 
	  И (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнаяОрганизация"");

	КонецЕсли;

	Если НЕ Объект.Метаданные().ТабличныеЧасти.Найти(""Товары"") = Неопределено Тогда
	Объект.ДополнительныеСвойства.Вставить(""ЗаполнитьСчетаУчетаПередЗаписью"", Истина);
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(Объект, РежимЗаписиДокумента.Проведение);
	Попытка	
				Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(""Ошибка при проведении ""+ Строка(Объект) + "". Описание: "" + ОписаниеОШибки());
		Объект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	КонецЕсли;
	
КонецЕсли</ПослеЗагрузкиОбъекта>
    <ПравилаКонвертацииОбъектов>
      <Правило>
        <Код>АвансовыйОтчет</Код>
        <Источник>ДокументСсылка.АвансовыйОтчет</Источник>
        <Приемник>ДокументСсылка.АвансовыйОтчет</Приемник>
        <ПослеЗагрузки>Для каждого СтрокаТЧ из Объект.Товары Цикл
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура);
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Товары"", Истина, Истина);
	
КонецЦикла;
	
МассивТЧ = Новый Массив;
МассивТЧ.Добавить(""ВозвратнаяТара"");
Для каждого ИмяТЧ из МассивТЧ Цикл
	Для каждого СтрокаТЧ из Объект[ИмяТЧ] Цикл
		Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТЧ, Истина, Истина);
	КонецЦикла;
КонецЦикла;

Для каждого СтрокаТабличнойЧасти Из Объект.ОплатаПоставщикам Цикл
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);

	СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	СтрокаТабличнойЧасти.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"") + Объект.ОплатаПоставщикам.Итог(""Сумма"") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Прочее"");</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ВозвратТоваровОтПокупателя</Код>
        <Источник>ДокументСсылка.ВозвратОтПокупателя</Источник>
        <Приемник>ДокументСсылка.ВозвратТоваровОтПокупателя</Приемник>
        <ПриЗагрузке>Если НЕ Параметры.Свойство(""КомиссияПоСтрокамТабличнойЧасти"") Тогда
	
	Параметры.Вставить(""КомиссияПоСтрокамТабличнойЧасти"", Новый Соответствие);
	
КонецЕсли;

КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;

Пока ФайлОбмена.Прочитать() Цикл
		
	ИмяУзла = ФайлОбмена.ЛокальноеИмя;
	ТипУзла = ФайлОбмена.ТипУзла;
	
	Если ИмяУзла = ""Строка"" Тогда
		
		КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, ""НомерСтроки""), одЗначениеЭлемента(ФайлОбмена, Тип(""Булево"")));
		
	ИначеЕсли (ИмяУзла = ""КомиссияПоСтрокамТабличнойЧасти"") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
		Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Ссылка, КомиссияПоСтрокамТабличнойЧасти);
		Прервать;
		
	КонецЕсли;
	
КонецЦикла;</ПриЗагрузке>
        <ПослеЗагрузки>

Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.ВозвратнаяТара, ""ВозвратнаяТара"", Истина);
Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, ""Товары"", Истина);

СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);

Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
Объект.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
Объект.СчетУчетаРасчетовПоТаре           = СчетаУчета.СчетУчетаТарыПокупателя;

Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
	Объект.Склад = Константы.СкладДляОбменаДаннымиСУТ.Получить();
КонецЕсли;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"");</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ВозвратТоваровПоставщику</Код>
        <Источник>ДокументСсылка.ВозвратПоставщику</Источник>
        <Приемник>ДокументСсылка.ВозвратТоваровПоставщику</Приемник>
        <ПриЗагрузке> Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПриЗагрузке>
        <ПослеЗагрузки>СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);

Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
Объект.СчетУчетаРасчетовПоПретензиям     = СчетаУчета.СчетРасчетовПоПретензиям;

Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.ВозвратнаяТара, ""ВозвратнаяТара"", Истина);
Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, ""Товары"", Истина);

Объект.СтатьяДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
Объект.ЗаполнитьСчетаУчетаРасчетов();

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"");</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>Доверенность</Код>
        <Источник>ДокументСсылка.Доверенность</Источник>
        <Приемник>ДокументСсылка.Доверенность</Приемник>
        <ПослеЗагрузки>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ИнвентаризацияТоваровНаСкладе</Код>
        <Источник>ДокументСсылка.ИнвентаризацияТМЦ</Источник>
        <Приемник>ДокументСсылка.ИнвентаризацияТоваровНаСкладе</Приемник>
        <ПослеЗагрузки>
// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество;
КонецЦикла;


Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>КорректировкаДолга</Код>
        <Источник>ДокументСсылка.КорректировкаДолга</Источник>
        <Приемник>ДокументСсылка.КорректировкаДолга</Приемник>
        <ПослеЗагрузки>ФормаОбъекта = Объект.ПолучитьФорму();

Для каждого СтрокаТЧ Из Объект.СуммыДолга Цикл
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетов) Тогда
		ФормаОбъекта.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ);
	КонецЕсли;
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ОприходованиеТоваров</Код>
        <Источник>ДокументСсылка.ОприходованиеТМЦ</Источник>
        <Приемник>ДокументСсылка.ОприходованиеТоваров</Приемник>
        <ПослеЗагрузки>Для каждого СтрокаТЧ Из Объект.Товары Цикл
	
	СчетаУчета   = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.Склад);

КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = Объект.Товары.Итог(""Сумма"");</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ОтчетОРозничныхПродажах</Код>
        <Источник>ДокументСсылка.ОтчетККМ</Источник>
        <Приемник>ДокументСсылка.ОтчетОРозничныхПродажах</Приемник>
        <ПриЗагрузке>Если НЕ Параметры.Свойство(""КомиссияПоСтрокамТабличнойЧасти"") Тогда
	
	Параметры.Вставить(""КомиссияПоСтрокамТабличнойЧасти"", Новый Соответствие);
	
КонецЕсли;

КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;

Пока ФайлОбмена.Прочитать() Цикл
		
	ИмяУзла = ФайлОбмена.ЛокальноеИмя;
	ТипУзла = ФайлОбмена.ТипУзла;
	
	Если ИмяУзла = ""Строка"" Тогда
		
		КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, ""НомерСтроки""), одЗначениеЭлемента(ФайлОбмена, Тип(""Булево"")));
		
	ИначеЕсли (ИмяУзла = ""КомиссияПоСтрокамТабличнойЧасти"") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
		Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Ссылка, КомиссияПоСтрокамТабличнойЧасти);
		Прервать;
		
	КонецЕсли;
	
КонецЦикла;</ПриЗагрузке>
        <ПослеЗагрузки>
Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, Истина);


Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"");</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ОтчетКомиссионераОПродажах</Код>
        <Источник>ДокументСсылка.ОтчетКомиссионера</Источник>
        <Приемник>ДокументСсылка.ОтчетКомиссионераОПродажах</Приемник>
        <ПослеЗагрузки>Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, ""Товары"", Истина);

СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
Объект.СчетУчетаРасчетовСКонтрагентом          = СчетаУчета.СчетРасчетовПокупателя;
Если Объект.УдержатьВознаграждение Тогда
	Объект.СчетУчетаРасчетовПоАвансамПолученным = СчетаУчета.СчетРасчетовСКомитентом;
Иначе
	Объект.СчетУчетаРасчетовПоАвансамПолученным = СчетаУчета.СчетАвансовПокупателя;
КонецЕсли;
Объект.СчетУчетаРасчетовЗаПосредническиеУслуги = СчетаУчета.СчетРасчетов;
Объект.СчетУчетаРасчетовПоАвансамВыданным      = СчетаУчета.СчетАвансов;
Объект.СчетУчетаНДС                            = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
Объект.СчетУчетаЗатрат                         = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;

Если НалоговыйУчетУСН.ПрименениеУСН(Объект.Организация, Объект.Дата) Тогда

	Объект.СчетУчетаРасчетовСКонтрагентомУСН          = СчетаУчета.СчетРасчетовПокупателяУСН;
	Объект.СчетУчетаРасчетовПоАвансамПолученнымУСН    = СчетаУчета.СчетАвансовПокупателяУСН;
	Объект.СчетУчетаРасчетовЗаПосредническиеУслугиУСН = СчетаУчета.СчетРасчетовУСН;
	Объект.СчетУчетаРасчетовПоАвансамВыданнымУСН      = СчетаУчета.СчетАвансовУСН;

КонецЕсли;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента      = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"");
Объект.СуммаВознаграждения = Объект.Товары.Итог(""СуммаВознаграждения"");
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ОтчетКомитентуОПродажах</Код>
        <Источник>ДокументСсылка.ОтчетКомитенту</Источник>
        <Приемник>ДокументСсылка.ОтчетКомитентуОПродажах</Приемник>
        <ПослеЗагрузки>СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
Если Объект.УдержатьВознаграждение Тогда
	Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетРасчетовСКомитентом;
Иначе
	Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
КонецЕсли;

СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Объект.УслугаПоВознаграждению);

Объект.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"");
Объект.СуммаВознаграждения = Объект.Товары.Итог(""СуммаВознаграждения"")+?(Объект.СуммаВключаетНДС,0,Объект.Товары.Итог(""СуммаНДСВознаграждения""));</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПеремещениеТоваров</Код>
        <Источник>ДокументСсылка.ПеремещениеТМЦ</Источник>
        <Приемник>ДокументСсылка.ПеремещениеТоваров</Приемник>
        <ПослеЗагрузки>Для каждого СтрокаТабЧасти Из Объект.Товары Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ""Товары"", Истина);
КонецЦикла;

Для каждого СтрокаТабЧасти Из Объект.ТоварыНаКомиссии Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ""ТоварыНаКомиссии"", Истина);
КонецЦикла;

Для каждого СтрокаТабЧасти Из Объект.ВозвратнаяТара Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ""ВозвратнаяТара"", Истина);
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Если Объект.ВидОперации.Пустая() Тогда
	Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПереоценкаТоваровВРознице</Код>
        <Источник>ДокументСсылка.ПереоценкаРозница</Источник>
        <Приемник>ДокументСсылка.ПереоценкаТоваровВРознице</Приемник>
        <ПослеЗагрузки>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПриходныйКассовыйОрдер</Код>
        <Источник>ДокументСсылка.ПКО</Источник>
        <Приемник>ДокументСсылка.ПриходныйКассовыйОрдер</Приемник>
        <ПослеЗагрузки>Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
Иначе
	Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
КонецЕсли;	

МассивПустыхСтрок = Новый Массив;

Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)Тогда

		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;

		Иначе

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;

		КонецЕсли;

		Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
			МассивПустыхСтрок.Добавить(СтрокаПлатеж);
		КонецЕсли;
		
	КонецЕсли;
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
КонецЕсли;

Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
	 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
КонецЦикла;

Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПоступлениеДопРасходов</Код>
        <Источник>ДокументСсылка.ПоступлениеДопРасходы</Источник>
        <Приемник>ДокументСсылка.ПоступлениеДопРасходов</Приемник>
        <ПослеЗагрузки>СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, Истина, Истина);
Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
Объект.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Объект.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Объект.СтавкаНДС));

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПоступлениеТоваровУслугПрочее</Код>
        <Источник>ДокументСсылка.ПоступлениеПрочее</Источник>
        <Приемник>ДокументСсылка.ПоступлениеТоваровУслуг</Приемник>
        <ПриЗагрузке>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПриЗагрузке>
        <ПослеЗагрузки>СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);

Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
Иначе
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
КонецЕсли;

Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;

Для каждого СтрокаТЧ из Объект.Товары Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Товары"", Истина, Истина);
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.Услуги Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Услуги"", Истина, Истина);
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.ВозвратнаяТара Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""ВозвратнаяТара"", Истина, Истина);
КонецЦикла;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПоступлениеТоваровУслуг</Код>
        <Источник>ДокументСсылка.ПоступлениеТМЦ</Источник>
        <Приемник>ДокументСсылка.ПоступлениеТоваровУслуг</Приемник>
        <ПриЗагрузке>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПриЗагрузке>
        <ПослеЗагрузки>СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);

Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
Иначе
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
КонецЕсли;

Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;

Для каждого СтрокаТЧ из Объект.Товары Цикл
	
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Товары"", Истина, Истина);
	
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.Услуги Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Услуги"", Истина, Истина);
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.ВозвратнаяТара Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""ВозвратнаяТара"", Истина, Истина);
КонецЦикла;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПоступлениеТоваровУслугРозница</Код>
        <Источник>ДокументСсылка.ПоступлениеТМЦРозница</Источник>
        <Приемник>ДокументСсылка.ПоступлениеТоваровУслуг</Приемник>
        <ПослеЗагрузки>СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);

Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
Иначе
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
КонецЕсли;

Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;

Для каждого СтрокаТЧ из Объект.Товары Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Товары"", Истина, Истина);
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.Услуги Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Услуги"", Истина, Истина);
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.ВозвратнаяТара Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""ВозвратнаяТара"", Истина, Истина);
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>РеализацияТоваровУслуг</Код>
        <Источник>ДокументСсылка.Реализация</Источник>
        <Приемник>ДокументСсылка.РеализацияТоваровУслуг</Приемник>
        <ПриЗагрузке>Если НЕ Параметры.Свойство(""КомиссияПоСтрокамТабличнойЧасти"") Тогда
	
	Параметры.Вставить(""КомиссияПоСтрокамТабличнойЧасти"", Новый Соответствие);
	
КонецЕсли;

КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;

Пока ФайлОбмена.Прочитать() Цикл
		
	ИмяУзла = ФайлОбмена.ЛокальноеИмя;
	ТипУзла = ФайлОбмена.ТипУзла;
	
	Если ИмяУзла = ""Строка"" Тогда
		
		КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, ""НомерСтроки""), одЗначениеЭлемента(ФайлОбмена, Тип(""Булево"")));
		
	ИначеЕсли (ИмяУзла = ""КомиссияПоСтрокамТабличнойЧасти"") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
		Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Ссылка, КомиссияПоСтрокамТабличнойЧасти);
		Прервать;
		
	КонецЕсли;
	
КонецЦикла;</ПриЗагрузке>
        <ПослеЗагрузки>

СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Объект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Объект.СчетУчетаРасчетовПоТаре        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
Иначе
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
КонецЕсли;
Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
Объект.ДополнительныеСвойства.Вставить(""ЗаполнитьСчетаУчетаПередЗаписью"", Истина);

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;
	
Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Услуги"");
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>РеализацияТоваровУслугПрочее</Код>
        <Источник>ДокументСсылка.РеализацияПрочее</Источник>
        <Приемник>ДокументСсылка.РеализацияТоваровУслуг</Приемник>
        <ПослеЗагрузки>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, ""Товары"", Истина);

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Услуги"");
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>РеализацияРозница</Код>
        <Источник>ДокументСсылка.РеализацияРозница</Источник>
        <Приемник>ДокументСсылка.РеализацияТоваровУслуг</Приемник>
        <ПриЗагрузке>Если НЕ Параметры.Свойство(""КомиссияПоСтрокамТабличнойЧасти"") Тогда
	
	Параметры.Вставить(""КомиссияПоСтрокамТабличнойЧасти"", Новый Соответствие);
	
КонецЕсли;

КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;

Пока ФайлОбмена.Прочитать() Цикл
		
	ИмяУзла = ФайлОбмена.ЛокальноеИмя;
	ТипУзла = ФайлОбмена.ТипУзла;
	
	Если ИмяУзла = ""Строка"" Тогда
		
		КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, ""НомерСтроки""), одЗначениеЭлемента(ФайлОбмена, Тип(""Булево"")));
		
	ИначеЕсли (ИмяУзла = ""КомиссияПоСтрокамТабличнойЧасти"") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
		Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Ссылка, КомиссияПоСтрокамТабличнойЧасти);
		Прервать;
		
	КонецЕсли;
	
КонецЦикла;</ПриЗагрузке>
        <ПослеЗагрузки>

СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Объект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Объект.СчетУчетаРасчетовПоТаре        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
Иначе
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
КонецЕсли;
Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
Объект.ДополнительныеСвойства.Вставить(""ЗаполнитьСчетаУчетаПередЗаписью"", Истина);

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Товары"") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, ""Услуги"");

Если Объект.Склад.ВидСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
	Сообщить(""Загружен документ розничной реализации с оптового склада! Необходимо передать товары в розницу вручную!"", СтатусСообщения.Важное);
	Сообщить("""" + Объект.Ссылка);
КонецЕсли;
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>РасходныйКассовыйОрдер</Код>
        <Источник>ДокументСсылка.РКО</Источник>
        <Приемник>ДокументСсылка.РасходныйКассовыйОрдер</Приемник>
        <ПослеЗагрузки>Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
	СтрокаПлатежа = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатежа.СуммаПлатежа = Объект.СуммаДокумента;
КонецЕсли;

Объект.НомерЧекаККМ = 0;

Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
Иначе
	Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
КонецЕсли;	

МассивПустыхСтрок = Новый Массив;

Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
	
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)Тогда

		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;

		Иначе

			Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;

			ИначеЕсли СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;

			Иначе
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;

			КонецЕсли;

			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;

		КонецЕсли;

	КонецЕсли;
	
	Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
		МассивПустыхСтрок.Добавить(СтрокаПлатеж);
	КонецЕсли;
	
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
	 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
КонецЦикла;

Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>СписаниеТоваров</Код>
        <Источник>ДокументСсылка.СписаниеТМЦ</Источник>
        <Приемник>ДокументСсылка.СписаниеТоваров</Приемник>
        <ПриЗагрузке>Если НЕ Параметры.Свойство(""КомиссияПоСтрокамТабличнойЧасти"") Тогда
	
	Параметры.Вставить(""КомиссияПоСтрокамТабличнойЧасти"", Новый Соответствие);
	
КонецЕсли;

КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;

Пока ФайлОбмена.Прочитать() Цикл
		
	ИмяУзла = ФайлОбмена.ЛокальноеИмя;
	ТипУзла = ФайлОбмена.ТипУзла;
	
	Если ИмяУзла = ""Строка"" Тогда
		
		КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, ""НомерСтроки""), одЗначениеЭлемента(ФайлОбмена, Тип(""Булево"")));
		
	ИначеЕсли (ИмяУзла = ""КомиссияПоСтрокамТабличнойЧасти"") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
		Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Ссылка, КомиссияПоСтрокамТабличнойЧасти);
		Прервать;
		
	КонецЕсли;
	
КонецЦикла;</ПриЗагрузке>
        <ПослеЗагрузки>

Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.ВозвратнаяТара, ""ВозвратнаяТара"", Истина);
Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, ""Товары"", Истина);

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Объект.СуммаДокумента = Объект.Товары.Итог(""Сумма"");</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПлатежноеПоручениеВходящее</Код>
        <Источник>ДокументСсылка.СтрокаВыпискиПриход</Источник>
        <Приемник>ДокументСсылка.ПоступлениеНаРасчетныйСчет</Приемник>
        <ПослеЗагрузки>Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
Иначе
	Объект.СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
КонецЕсли;	

МассивПустыхСтрок = Новый Массив;

Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда

		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);

		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;

		Иначе
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;

		КонецЕсли;
		
		Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
			МассивПустыхСтрок.Добавить(СтрокаПлатеж);
		КонецЕсли;

	КонецЕсли;
КонецЦикла;

Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
КонецЕсли;

Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
	 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
КонецЦикла;

Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПлатежныйОрдерСписаниеДенежныхСредств</Код>
        <Источник>ДокументСсылка.СтрокаВыпискиРасход</Источник>
        <Приемник>ДокументСсылка.СписаниеСРасчетногоСчета</Приемник>
        <ПослеЗагрузки>Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
Иначе
	Объект.СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
КонецЕсли;	

МассивПустыхСтрок = Новый Массив;

Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда

		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
		Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
			МассивПустыхСтрок.Добавить(СтрокаПлатеж);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю тогда

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;

		Иначе

			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;

		КонецЕсли;

	КонецЕсли;
КонецЦикла;

Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
	 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
КонецЦикла;

Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>СчетФактураВыданный</Код>
        <Источник>ДокументСсылка.СчетФактураВыданный</Источник>
        <Приемник>ДокументСсылка.СчетФактураВыданный</Приемник>
        <ПослеЗагрузки>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	НеНашлиДокументОснование = Истина;
	Для каждого ДокументОснование из Объект.ДокументыОснования Цикл
		Если ДокументОснование.ДокументОснование = Объект.ДокументОснование Тогда
			НеНашлиДокументОснование = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НеНашлиДокументОснование Тогда
		НовыйДокументОснование = Объект.ДокументыОснования.Добавить();
		НовыйДокументОснование.ДокументОснование = Объект.ДокументОснование;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип(""ДокументСсылка.КорректировкаДолга"") Тогда
		Объект.Контрагент = Неопределено;
		Объект.ДоговорКонтрагента = Неопределено;
		Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	КонецЕсли;



КонецЕсли;

Если (Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс) И (Объект.Авансы.Количество() = 0) Тогда
		Объект.Авансы.Добавить();
		Объект.Авансы[0].СтавкаНДС = Объект.СтавкаНДС;
		Объект.Авансы[0].СуммаНДС = Объект.СуммаНДС;
		Объект.Авансы[0].Сумма = Объект.Сумма;
		Объект.СуммаДокумента = Объект.Сумма;
		
КонецЕсли;

Объект.ОпределениеПараметровСчетаФактурыНаРеализацию();</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>СчетФактураПолученный</Код>
        <Источник>ДокументСсылка.СчетФактураПолученный</Источник>
        <Приемник>ДокументСсылка.СчетФактураПолученный</Приемник>
        <ПриЗагрузке>Если ОбъектНайден Тогда
	Объект.ДокументыОснования.Очистить();
КонецЕсли;</ПриЗагрузке>
        <ПослеЗагрузки>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	НеНашлиДокументОснование = Истина;
	Для каждого ДокументОснование из Объект.ДокументыОснования Цикл
		Если ДокументОснование = Объект.ДокументОснование Тогда
			НеНашлиДокументОснование = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеНашлиДокументОснование Тогда
		НовыйДокументОснование = Объект.ДокументыОснования.Добавить();
		НовыйДокументОснование.ДокументОснование = Объект.ДокументОснование;
	КонецЕсли;
	
КонецЕсли;

Если (Объект.НаАванс) И (Объект.Авансы.Количество() = 0) Тогда
		Объект.Авансы.Добавить();
		Объект.Авансы[0].Сумма = Объект.СуммаДокумента;
КонецЕсли;

Объект.ОпределениеПараметровСчетаФактуры();</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПоступлениеТоваровУслугИмпорт</Код>
        <Источник>ДокументСсылка.ПоступлениеТМЦИмпорт</Источник>
        <Приемник>ДокументСсылка.ПоступлениеТоваровУслуг</Приемник>
        <ПослеЗагрузки>СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);

Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
Иначе
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
КонецЕсли;

Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;

Для каждого СтрокаТЧ из Объект.Товары Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Товары"", Истина, Истина);
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.Услуги Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""Услуги"", Истина, Истина);
КонецЦикла;

Для каждого СтрокаТЧ Из Объект.ВозвратнаяТара Цикл
	Объект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ""ВозвратнаяТара"", Истина, Истина);
КонецЦикла;

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;

Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ГТДИмпорт</Код>
        <Источник>ДокументСсылка.ПоступлениеТМЦИмпорт</Источник>
        <Приемник>ДокументСсылка.ГТДИмпорт</Приемник>
        <ПослеЗагрузки>Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары, Истина, Истина);

СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
Объект.СчетУчетаРасчетовСКонтрагентомВал = ПланыСчетов.Хозрасчетный.НайтиПоКоду(""60.21"");

Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>ПлатежноеПоручениеИсходящее</Код>
        <Источник>ДокументСсылка.ПлатежноеПоручение</Источник>
        <Приемник>ДокументСсылка.ПлатежноеПоручение</Приемник>
        <ПослеЗагрузки>Если Объект.Ответственный.Пустая() Тогда
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецЕсли;

Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
КонецЕсли;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>СчетНаОплатуПокупателю</Код>
        <Источник>ДокументСсылка.АвансовыйОтчет</Источник>
        <Приемник>ДокументСсылка.СчетНаОплатуПокупателю</Приемник>
      </Правило>
      <Правило>
        <Код>СчетНаОплатуПокупателюПоЗаявке</Код>
        <Источник>ДокументСсылка.ЗаявкаПокупателя</Источник>
        <Приемник>ДокументСсылка.СчетНаОплатуПокупателю</Приемник>
        <ПослеЗагрузки>// Корректируем количество с учетом коэффициента
Для каждого СтрокаТоваров Из Объект.Товары Цикл
	СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
	Если СтрокаТоваров.Коэффициент&lt;&gt; 0 Тогда 
		СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
	КонецЕсли;
КонецЦикла;</ПослеЗагрузки>
      </Правило>
      <Правило>
        <Код>КомплектацияНоменклатуры</Код>
        <Источник>ДокументСсылка.КомплектацияТМЦ</Источник>
        <Приемник>ДокументСсылка.КомплектацияНоменклатуры</Приемник>
      </Правило>
      <Правило>
        <Код>Банки</Код>
        <Источник>СправочникСсылка.Банки</Источник>
        <Приемник>СправочникСсылка.Банки</Приемник>
      </Правило>
      <Правило>
        <Код>БанковскиеСчета</Код>
        <Источник>СправочникСсылка.БанковскиеСчета</Источник>
        <Приемник>СправочникСсылка.БанковскиеСчета</Приемник>
      </Правило>
      <Правило>
        <Код>Валюты</Код>
        <Источник>СправочникСсылка.Валюты</Источник>
        <Приемник>СправочникСсылка.Валюты</Приемник>
      </Правило>
      <Правило>
        <Код>НомераГТД</Код>
        <Источник>СправочникСсылка.ГТД</Источник>
        <Приемник>СправочникСсылка.НомераГТД</Приемник>
      </Правило>
      <Правило>
        <Код>СтатьиДвиженияДенежныхСредств</Код>
        <Источник>СправочникСсылка.ДвиженияДенежныхСредств</Источник>
        <Приемник>СправочникСсылка.СтатьиДвиженияДенежныхСредств</Приемник>
      </Правило>
      <Правило>
        <Код>Контрагенты</Код>
        <Источник>СправочникСсылка.Контрагенты</Источник>
        <Приемник>СправочникСсылка.Контрагенты</Приемник>
        <ПослеЗагрузки>
ДлинаИНН = СтрДлина(СокрЛП(Объект.ИНН));
Если ДлинаИНН = 10 Тогда 
	Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
ИначеЕсли ДлинаИНН = 12 Тогда 
	Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
КонецЕсли;
</ПослеЗагрузки>
        <ПоследовательностьПолейПоиска>Если НомерВариантаПоиска = 1 тогда 
	Если ЗначениеЗаполнено(СвойстваПоиска[""ИНН""]) Тогда 
		СтрокаИменСвойствПоиска = ""ИНН, КПП"";
	Иначе
		СтрокаИменСвойствПоиска = НомерВариантаПоиска;
		КонецЕсли;
КонецЕсли;
</ПоследовательностьПолейПоиска>
      </Правило>
      <Правило>
        <Код>Номенклатура</Код>
        <Источник>СправочникСсылка.Номенклатура</Источник>
        <Приемник>СправочникСсылка.Номенклатура</Приемник>
      </Правило>
      <Правило>
        <Код>КлассификаторЕдиницИзмерения</Код>
        <Источник>СправочникСсылка.ОКЕИ</Источник>
        <Приемник>СправочникСсылка.КлассификаторЕдиницИзмерения</Приемник>
      </Правило>
      <Правило>
        <Код>Организации</Код>
        <Источник>СправочникСсылка.СвоиЮрЛица</Источник>
        <Приемник>СправочникСсылка.Организации</Приемник>
      </Правило>
      <Правило>
        <Код>Кассы</Код>
        <Источник>СправочникСсылка.Склады</Источник>
        <Приемник>СправочникСсылка.Склады</Приемник>
      </Правило>
      <Правило>
        <Код>Склады</Код>
        <Источник>СправочникСсылка.Склады</Источник>
        <Приемник>СправочникСсылка.Склады</Приемник>
      </Правило>
      <Правило>
        <Код>ФизическиеЛица</Код>
        <Источник>СправочникСсылка.ФизЛица</Источник>
        <Приемник>СправочникСсылка.ФизическиеЛица</Приемник>
      </Правило>
      <Правило>
        <Код>СтраныМира</Код>
        <Источник>СправочникСсылка.ОКСМ</Источник>
        <Приемник>СправочникСсылка.СтраныМира</Приемник>
      </Правило>
      <Правило>
        <Код>ОКЕИ</Код>
        <Источник>СправочникСсылка.ОКЕИ</Источник>
        <Приемник>СправочникСсылка.КлассификаторЕдиницИзмерения</Приемник>
      </Правило>
      <Правило>
        <Код>ПрочиеДоходыИРасходы</Код>
        <Источник />
        <Приемник>СправочникСсылка.ПрочиеДоходыИРасходы</Приемник>
      </Правило>
      <Правило>
        <Код>СтатьиДвиженияДенежныхСредствСправочник</Код>
        <Источник>СправочникСсылка.ДвиженияДенежныхСредств</Источник>
        <Приемник>СправочникСсылка.СтатьиДвиженияДенежныхСредств</Приемник>
      </Правило>
      <Правило>
        <Код>ДоговорыКонтрагентов</Код>
        <Источник>СправочникСсылка.Договоры</Источник>
        <Приемник>СправочникСсылка.ДоговорыКонтрагентов</Приемник>
        <ПриЗагрузке>
	       НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
			НоваяЗапись.Организация = Объект.Организация;
			НоваяЗапись.Контрагент  = Объект.Владелец;
			НоваяЗапись.ВидДоговора = Объект.ВидДоговора;
			НоваяЗапись.Прочитать();

			ОсновнойДоговор = НоваяЗапись.Договор; 
			Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
				Ссылка = ОсновнойДоговор;
				//Сообщить(""Есть основной договор: "" + ОсновнойДоговор);
			Иначе 	
				Если ОбъектНайден Тогда
					НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
					НоваяЗапись.Организация = Ссылка.Организация;
					НоваяЗапись.Контрагент  = Ссылка.Владелец;
					НоваяЗапись.ВидДоговора = Ссылка.ВидДоговора; 		
					НоваяЗапись.Договор = Ссылка;
					НоваяЗапись.Записать(Истина);	
					//Сообщить(""Договор не новый, сделали основным: "" + Ссылка);
				Иначе   
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
					
					Ссылка = Объект.Ссылка; 		
					НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
					НоваяЗапись.Организация = Ссылка.Организация;
					НоваяЗапись.Контрагент  = Ссылка.Владелец;
					НоваяЗапись.ВидДоговора = Ссылка.ВидДоговора; 		
					НоваяЗапись.Договор = Ссылка;
					НоваяЗапись.Записать(Истина);	
					//Сообщить(""Новый, сделали основным: "" + Ссылка);
				КонецЕсли;
			КонецЕсли;
			ОбъектМодифицирован = Ложь;
			НеЗамещатьОбъект = Истина;  	
			ОбъектНайден = Истина;
			Объект = Ссылка.ПолучитьОбъект();
			СозданныйОбъект = Объект;
			ЗагруженныеОбъекты[НППСсылки].Вставить(""СсылкаНаОбъект"", Ссылка);
			
		</ПриЗагрузке>
      </Правило>
      <Правило>
        <Код>Пользователи</Код>
        <Источник>СправочникСсылка.Пользователи</Источник>
        <Приемник>СправочникСсылка.Пользователи</Приемник>
      </Правило>
      <Правило>
        <Код>ПорядкиОкругления</Код>
        <Источник>ПеречислениеСсылка.ПорядкиОкругления</Источник>
        <Приемник>ПеречислениеСсылка.ПорядкиОкругления</Приемник>
      </Правило>
      <Правило>
        <Код>СтавкиНДС</Код>
        <Источник>ПеречислениеСсылка.СтавкиНДС</Источник>
        <Приемник>ПеречислениеСсылка.СтавкиНДС</Приемник>
      </Правило>
      <Правило>
        <Код>СпособыРасчетаКомиссионногоВознаграждения</Код>
        <Источник>ПеречислениеСсылка.СпособыРасчетаВознаграждения</Источник>
        <Приемник>ПеречислениеСсылка.СпособыРасчетаКомиссионногоВознаграждения</Приемник>
      </Правило>
      <Правило>
        <Код>ВидыДоговоровКонтрагентов</Код>
        <Источник />
        <Приемник>ПеречислениеСсылка.ВидыДоговоровКонтрагентов</Приемник>
      </Правило>
      <Правило>
        <Код>ФИОФизЛиц</Код>
        <Источник />
        <Приемник>РегистрСведенийЗапись.ФИОФизЛиц</Приемник>
      </Правило>
	  <Правило>
        <Код>ВидыНоменклатуры</Код>
        <Источник />
        <Приемник>СправочникСсылка.ВидыНоменклатуры</Приемник>
      </Правило>
      <Правило>
        <Код>КонтактнаяИнформация</Код>
        <Источник />
        <Приемник>РегистрСведенийЗапись.КонтактнаяИнформация</Приемник>
      </Правило>
    </ПравилаКонвертацииОбъектов>
    <ПравилаОчисткиДанных />
    <Алгоритмы>
      <Алгоритм Имя=""ПолучитьСтруктуруАдреса"" ИспользуетсяПриЗагрузке=""false"">
        <Текст>Адрес = ИсходящиеДанные.Получить(""Адрес"");
АдресСписком = глРазложить(Адрес);

Если СтрКоличествоСтрок(Адрес) &lt;&gt; 1 Тогда     // не должно быть переводов строк
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрЧислоВхождений(Адрес, "","") &lt;&gt; 9 Тогда // должно быть 9 запятых
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(1))  &gt; 3  Тогда   // код страны не &gt; 3 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(2))  &gt; 6  Тогда   // индекс не &gt; 6 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(3))  &gt; 30 Тогда   // наим.региона не &gt; 30 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(4))  &gt; 35 Тогда   // наим.района не &gt; 35 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(5))  &gt; 35 Тогда   // наим.города не &gt; 35 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(6))  &gt; 45 Тогда   // наим.нас.пункта не &gt; 45 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(7))  &gt; 45 Тогда   // наим.улицы не &gt; 45 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(8))  &gt; 10  Тогда   // номер дома не &gt; 10 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(9))  &gt; 10  Тогда   // номер корпуса не &gt; 10 символов
	АдресСоответствуетТребованиямМНС = 0;
ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(10)) &gt; 10  Тогда   // номер квартиры не &gt; 10 символов
	АдресСоответствуетТребованиямМНС = 0;
Иначе
	АдресСоответствуетТребованиямМНС = 1;
КонецЕсли;

Если АдресСоответствуетТребованиямМНС = 1 Тогда
	ИсходящиеДанные.Установить(""Поле1"", АдресСписком.ПолучитьЗначение(2)); // индекс
	ИсходящиеДанные.Установить(""Поле2"", АдресСписком.ПолучитьЗначение(3)); // регион
	ИсходящиеДанные.Установить(""Поле3"", АдресСписком.ПолучитьЗначение(4)); // район
	ИсходящиеДанные.Установить(""Поле4"", АдресСписком.ПолучитьЗначение(5)); // город
	ИсходящиеДанные.Установить(""Поле5"", АдресСписком.ПолучитьЗначение(6)); // населенный пункт
	ИсходящиеДанные.Установить(""Поле6"", АдресСписком.ПолучитьЗначение(7)); // улица
	ИсходящиеДанные.Установить(""Поле7"", АдресСписком.ПолучитьЗначение(8)); // дом
	ИсходящиеДанные.Установить(""Поле8"", АдресСписком.ПолучитьЗначение(9)); // корпус
	ИсходящиеДанные.Установить(""Поле9"", АдресСписком.ПолучитьЗначение(10)); // квартира
	ИсходящиеДанные.Установить(""ТипДома"",		?(ПустоеЗначение(АдресСписком.ПолучитьЗначение(8))=1, """", ""Дом""));
	ИсходящиеДанные.Установить(""ТипКвартиры"",	?(ПустоеЗначение(АдресСписком.ПолучитьЗначение(9))=1, """", ""Квартира""));
	ИсходящиеДанные.Установить(""ТипКорпуса"",	?(ПустоеЗначение(АдресСписком.ПолучитьЗначение(10))=1,"""", ""Корпус""));
	
	ТекПредставление = """";
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле1"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", "" + СокрЛП(ИсходящиеДанные.Получить(""Поле1""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле2"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", "" + СокрЛП(ИсходящиеДанные.Получить(""Поле2""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле3"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", "" + СокрЛП(ИсходящиеДанные.Получить(""Поле3""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле4"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", "" + СокрЛП(ИсходящиеДанные.Получить(""Поле4""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле5"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", "" + СокрЛП(ИсходящиеДанные.Получить(""Поле5""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле6"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", "" + СокрЛП(ИсходящиеДанные.Получить(""Поле6""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле7"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", дом № "" + СокрЛП(ИсходящиеДанные.Получить(""Поле7""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле8"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", корпус "" + СокрЛП(ИсходящиеДанные.Получить(""Поле8""));
	КонецЕсли;
	
	Если СокрЛП(ИсходящиеДанные.Получить(""Поле9"")) &lt;&gt; """" Тогда
		ТекПредставление = ТекПредставление + "", кв."" + СокрЛП(ИсходящиеДанные.Получить(""Поле9""));
	КонецЕсли;
	
	Если СтрДлина(ТекПредставление) &gt; 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	ИсходящиеДанные.Установить(""Представление"", ТекПредставление);
	
Иначе
	//Сообщить(""Адрес: "" + Адрес + "" не соответствует требованиям МНС, ""+ИсходящиеДанные.Получить(""Объект""));
	ИсходящиеДанные.Установить(""Представление"", Адрес);
КонецЕсли;</Текст>
      </Алгоритм>
    </Алгоритмы>
    <Запросы />
  </ПравилаОбмена>";
		#endregion 
	}
}

